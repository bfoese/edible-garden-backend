import { CacheInterceptor, ExecutionContext, Injectable } from '@nestjs/common';
import { IncomingMessage } from 'http';

/**
 * By default, Nest uses the request URL (in an HTTP app) or cache key (set
 * through the "\@CacheKey()" decorator) to associate cache records with your
 * endpoints. This interceptor enhances the cache key with the i18nLang code
 * which was resolved for the given request by EgI18nModule.
 */
@Injectable()
export class I18nLangCacheInterceptor extends CacheInterceptor {
  /**
   * @param context -
   * @returns Cache key in the form of 'foo/bar/baz?i18nLang=de' if an i18nLang
   * is given, otherwise it falls back to the super implementation which is only
   * the URL of the request.
   */
  public trackBy(context: ExecutionContext): string | undefined {
    const key = this.buildCacheKey(super.trackBy(context), this.getI18nLang(context));
    return key;
  }

  /**
   * Builds an enhanced cache key or falls back to defaultKey if no i18nLang
   * value is given.
   * @param defaultKey - Default cache key that would be generated by the super
   * implementation.
   * @param i18nLang - Language code associated with the request, e.g. 'de',
   * 'en', 'fr'
   * @returns Cache key enhanced with i18nLang or defaultKey if no i18nLang
   * value is given.
   */
  private buildCacheKey(defaultKey: string, i18nLang: string | undefined): string {
    if (!defaultKey || !i18nLang) {
      return defaultKey;
    }
    return `${defaultKey}?i18nLang=${i18nLang}`;
  }

  /**
   * Extract the i18nLang value from the context.
   *
   * @param context -
   * @returns I18nLang value or undefined, if not present in the context
   */
  private getI18nLang(context: ExecutionContext): string | undefined {
    const filtered = context.getArgs().filter((arg) => arg instanceof IncomingMessage);
    if (filtered && filtered.length === 1) {
      const incomingMsgArgs: IncomingMessage = filtered[0];
      return (incomingMsgArgs as any).i18nLang;
    }
    return undefined;
  }
}
